


******************* BASIC USAGE *************************

1) Add path to the provided (modified) version of PnetCDF and the DTF library
   when compiling/linking the library. DTF library is linked as: -L$(PATH_TO_DTF) -ldtf.

* C users:
   #include "dtf.h" 

* Fortran users: import DTF functions into program using e.g. "external":

  external dtf_init


2) Modify each component: 
   - Include "dtf.h" 
   - Add dtf_init() and dtf_finalize() (see description in the API description section) in each component. 
   - add any of the transfer functions in corresponding place in each component

3) Before run set set global variable DTF_GLOBAL_PATH to some path accessible by all processes in all components:

	e.g.:  export DTF_GLOBAL_PATH=/some/path/in/PFS

******************* ENVIROMENT VARIABLES *************************

*** DTF_GLOBAL_PATH - should be set to a directory visible to all processes. 
    Used to establish connection via a port between the components.
*** DTF_VERBOSE_LEVEL: how much information to print out (default 0). 

	Possible values:
	0 - only errors and warnings
	1 - debug information
	2 - extended debug information 

*** DTF_SCALE - special flag for SCALE-LETKF, should be set to 1 for SCALE-LETKF executions (default 0)
*** DTF_INI_FILE - if this is set, the value will overrride the path to the ini file passed in dtf_init()

*** MAX_WORKGROUP_SIZE - number of processes I/O requests from which are handled by one master 
    (i.e. number of masters in the execution = number of processes per component / MAX_WORKGROUP_SIZE) (default 64)
    Try different number of masters for reasonable performance.
*** DTF_PRINT_STATS
*** DTF_USE_MSG_BUFFER
*** DTF_DATA_MSG_SIZE_LIMIT
*** DTF_IODB_RANGE

******************** USER API *****************************

***   int dtf_init(char* filename, char* module_name)

DESCRIPTION: 
	Library initialization function. 
	Every component should call this function. 
        Init function should be called after MPI_Init. 

PARAMETERS:
	[in] filename - path to the DTF configuration file
	[in] module_name - name of the component calling the function. 
             This name should be listed in the configuration file.              
RETURN: 
	0 - successfully initialized, otherwise 1

NOTE:
	Fortran API has an additional parameter error (integer):
        call dtf_init('../dtf.ini'//CHAR(0), 'letkf'//CHAR(0), error)	

***  int dtf_finalize():

DESCRIPTION:
 	Library finalization. Should be called before MPI_Finalize().

PARAMETERS:
	None
RETURN:
	0 - successfully initialized, otherwise 1
NOTE: 
	Fortran API has an additional parameter error (integer):
        call dtf_finalize(error)	

*** int dtf_transfer(const char *filename, int ncid)
    int dtf_transfer_complete_all()

DESCRIPTION: 

	Data transfer functions. Should be called in each component participating in 
        the data transfer. For performance reasons it is recommended to call this 
        function as few times as possible, ideally, one time per file right after the 
        PnetCDF I/O calls but before the file is closed. All functions will block until 
	the data transfer is complete. 

NOTES 
	* dtf_transfer() and dtf_transfer_v2():
	In case, several files are 
        transfered between the components, the order in which the transfer functions 
        are called should be the same in both components. I.e., if component 1 first 
	calls the transfer function for file A and then, file B, component 2 should call
	the transfer function in the same order. 
	dtf_transfer_v2() is used in combination with DTF_IGNORE_ITER. Any transfer functions 
	for iterations up to the iteration set via DTF_IGNORE_ITER will be ignored (Used
	in SCALE-LETKF).
	* dtf_transfer_complete_all()
	completes all active transfers for all files. May be used instead of calling dtf_transfer
	for each file separately. 

PARAMETERS:
	[IN] filename - name of the file for which the data transfer should be performed. 
	     File must be listed in the DTF configuration file.
	[IN] ncid - file ncid. Not necessary, -1 may be passed. 
	[IN] it - current iteration
	
RETURN:
	Always 0. If an error occurs, the program aborts.

EXAMPLE: For example, if there are two files A and B passed between the 
	the components the possible combinations of transfer functions are: 

	Component 1:		Component 2:
	-------------		-----------
	I/O for file A		I/O for file A
	dtf_transfer(A)		
	I/O for file B		I/O for file B
	dtf_transfer(B)		dtf_transfer_complete_all()

	Component 1:		Component 2:
	-------------		-----------
	I/O for file A		I/O for file B
	dtf_transfer(A)		
	I/O for file B		I/O for file A
	dtf_transfer(B)		dtf_transfer_complete_all()

	Component 1:		Component 2:
	-------------		-----------
	I/O for file A		I/O for file A
	dtf_transfer(A)		dtf_transfer(A)
	I/O for file B		I/O for file B
	dtf_transfer(B)		dtf_transfer(B)

	(*dtf_transfer_v2 may be used instead of dtf_transfer)

*** void dtf_print(const char *str)

DESCRIPTION:
	Print a message. 

PARAMETERS:
	[IN] str - string to print.

*** void dtf_time_start()
    void dtf_time_end()

DESCRIPTION:
	Timer functions. May be put around whatever code the user wants to time.
	The value is printed out at the end of the execution. 
	If used multiple times during the execution, the accumulative time will 
	be printed in the end. 

